// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240716170628_AdditionOfDescriptionForTicketCategory")]
    partial class AdditionOfDescriptionForTicketCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Accounting.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubGroupAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubGroupAccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Core.Models.Accounting.Bill", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BillNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Narration")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Core.Models.Accounting.BillTranItems", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BillId");

                    b.ToTable("billTranItems");
                });

            modelBuilder.Entity("Core.Models.Accounting.GroupAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Behaviour")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("GroupAccounts");
                });

            modelBuilder.Entity("Core.Models.Accounting.Product", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Rate")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Core.Models.Accounting.SubGroupAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("SubGroupAccounts");
                });

            modelBuilder.Entity("Core.Models.Accounting.TransactionEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TranAccount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TranAccount");

                    b.ToTable("transactionEntries");
                });

            modelBuilder.Entity("Core.Models.Accounting.Vendor", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountNo")
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("BillingRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("BusinessIdNo")
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("OpeningBalanceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentAccount")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VendorType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PaymentAccount");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Core.Models.Billing.Address", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("VendorId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Core.Models.Billing.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ApplicationDate")
                        .HasColumnType("date");

                    b.Property<string>("ApplicationNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<string>("BillDeliveryMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("BlockId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.Property<int?>("CustomertarrifId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LocalAuthorizationDocument")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NearestLandMark")
                        .HasColumnType("longtext");

                    b.Property<int>("OperationAreaId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlotNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProofOfIdentity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProofOfInstallationSite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProofOfOwnerShip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubTerritoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("SurveyDate")
                        .HasColumnType("date");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("BlockId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerCategoryId");

                    b.HasIndex("CustomerType");

                    b.HasIndex("CustomertarrifId");

                    b.HasIndex("OperationAreaId");

                    b.HasIndex("StateId");

                    b.HasIndex("SubTerritoryId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Core.Models.Billing.ApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLogs");
                });

            modelBuilder.Entity("Core.Models.Billing.BillAdjustmentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdjustmentReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AdjustmentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AdjustmentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CustRef")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EvidenceFilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TransactionCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionCode");

                    b.ToTable("BillAdjustmentRequests");
                });

            modelBuilder.Entity("Core.Models.Billing.BillDeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BillDeliveryMethods");
                });

            modelBuilder.Entity("Core.Models.Billing.BillingCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerRef")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateConnected")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TarrifId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TarrifId");

                    b.ToTable("BillingCustomers");
                });

            modelBuilder.Entity("Core.Models.Billing.BillingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("BillingPeriod");
                });

            modelBuilder.Entity("Core.Models.Billing.BillingRequest", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int>("Biller")
                        .HasColumnType("int");

                    b.Property<int>("BillingPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("OperationAreaId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ScheduledBillingDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("BillingPeriodId");

                    b.HasIndex("BranchId");

                    b.HasIndex("OperationAreaId");

                    b.ToTable("BillingRequests");
                });

            modelBuilder.Entity("Core.Models.Billing.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlockCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Core.Models.Billing.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OperationAreaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationAreaId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Core.Models.Billing.BulkReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingCycleId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("MeterReaderId")
                        .HasColumnType("int");

                    b.Property<int>("OperationAreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("filelocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BillingCycleId");

                    b.HasIndex("BranchId");

                    b.HasIndex("OperationAreaId");

                    b.ToTable("BulkReadings");
                });

            modelBuilder.Entity("Core.Models.Billing.CustomerBill", b =>
                {
                    b.Property<int>("CustomerBillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CustomerBillId"));

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("BillPeriod")
                        .HasColumnType("int");

                    b.Property<int>("CurrentReading")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PreviousReading")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmountPaid")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalBillAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("consuption")
                        .HasColumnType("int");

                    b.HasKey("CustomerBillId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBills");
                });

            modelBuilder.Entity("Core.Models.Billing.CustomerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CustomerCategories");
                });

            modelBuilder.Entity("Core.Models.Billing.CustomerTarrif", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("TarrifAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("TarrifDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TarrifName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CustomerTarrifs");
                });

            modelBuilder.Entity("Core.Models.Billing.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("Core.Models.Billing.DocketInitiation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("BlockNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerRef")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DateOfInstallation")
                        .HasColumnType("date");

                    b.Property<string>("Dials")
                        .HasColumnType("longtext");

                    b.Property<string>("InitialReading")
                        .HasColumnType("longtext");

                    b.Property<int>("InstalledBy")
                        .HasColumnType("int");

                    b.Property<string>("LocationCordinates")
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("MeterManufactureDate")
                        .HasColumnType("date");

                    b.Property<string>("MeterNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MeterSize")
                        .HasColumnType("longtext");

                    b.Property<string>("MeterType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("InstalledBy");

                    b.ToTable("DocketInitiations");
                });

            modelBuilder.Entity("Core.Models.Billing.JobCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JobCardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobCardType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("applicationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("applicationId");

                    b.ToTable("JobCards");
                });

            modelBuilder.Entity("Core.Models.Billing.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaterialId"));

                    b.Property<bool>("Invoiceable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MaterialDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("MaterialUnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MaterialId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Core.Models.Billing.MeterMake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MeterMakes");
                });

            modelBuilder.Entity("Core.Models.Billing.MeterReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Consumption")
                        .HasColumnType("int");

                    b.Property<string>("CustomerRef")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBilled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMeterReset")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MeterNo")
                        .HasColumnType("int");

                    b.Property<int>("PreviousReading")
                        .HasColumnType("int");

                    b.Property<DateOnly>("PreviousReadingDate")
                        .HasColumnType("date");

                    b.Property<int>("Reading")
                        .HasColumnType("int");

                    b.Property<int>("ReadingBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReadingReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReadingSource")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReadingStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReadingType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReadingBy");

                    b.ToTable("MeterReadings");
                });

            modelBuilder.Entity("Core.Models.Billing.MeterSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MeterSizes");
                });

            modelBuilder.Entity("Core.Models.Billing.MeterTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MeterType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MeterTypes");
                });

            modelBuilder.Entity("Core.Models.Billing.NewConnectionInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("NewConnectionInvoices");
                });

            modelBuilder.Entity("Core.Models.Billing.NewConnectionInvoiceMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("NewConnectionInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("NewConnectionInvoiceId");

                    b.ToTable("NewConnectionInvoiceMaterials");
                });

            modelBuilder.Entity("Core.Models.Billing.NewMeterServicing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerRef")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DateOfInstallation")
                        .HasColumnType("date");

                    b.Property<string>("Dials")
                        .HasColumnType("longtext");

                    b.Property<int>("InitialReading")
                        .HasColumnType("int");

                    b.Property<int>("InstalledBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ManufactureDate")
                        .HasColumnType("date");

                    b.Property<int>("MeterMakeId")
                        .HasColumnType("int");

                    b.Property<string>("MeterNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("MeterSizeId")
                        .HasColumnType("int");

                    b.Property<int?>("MeterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MeterlifeDuration")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("InstalledBy");

                    b.HasIndex("MeterMakeId");

                    b.HasIndex("MeterSizeId");

                    b.HasIndex("MeterTypeId");

                    b.ToTable("NewMeterServicings");
                });

            modelBuilder.Entity("Core.Models.Billing.OperationArea", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("OperationAreas");
                });

            modelBuilder.Entity("Core.Models.Billing.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerRef")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymntReference")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Core.Models.Billing.State", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Core.Models.Billing.SubTerritory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubTerritories");
                });

            modelBuilder.Entity("Core.Models.Billing.SurveyReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("BlocMapNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ConnectionFromExistingServicePipe")
                        .HasColumnType("longtext");

                    b.Property<string>("ConnectionMainDetails")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DistanceFromMain")
                        .HasColumnType("longtext");

                    b.Property<string>("DistanceToConnectionPoint")
                        .HasColumnType("longtext");

                    b.Property<string>("ExistingConnections")
                        .HasColumnType("longtext");

                    b.Property<string>("ExistingMainSize")
                        .HasColumnType("longtext");

                    b.Property<string>("IdealConnectionType")
                        .HasColumnType("longtext");

                    b.Property<string>("LandType")
                        .HasColumnType("longtext");

                    b.Property<string>("MainLineDetails")
                        .HasColumnType("longtext");

                    b.Property<string>("NearByCustomer")
                        .HasColumnType("longtext");

                    b.Property<string>("Obstractions")
                        .HasColumnType("longtext");

                    b.Property<string>("Recommendation")
                        .HasColumnType("longtext");

                    b.Property<string>("RoadInformation")
                        .HasColumnType("longtext");

                    b.Property<string>("ServicePipeDepth")
                        .HasColumnType("longtext");

                    b.Property<string>("ServicePipeLength")
                        .HasColumnType("longtext");

                    b.Property<string>("ServicePipeMaterial")
                        .HasColumnType("longtext");

                    b.Property<string>("ServicePipeSize")
                        .HasColumnType("longtext");

                    b.Property<string>("SurveryReportFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SurveyorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("SurveyorId");

                    b.ToTable("surveyReports");
                });

            modelBuilder.Entity("Core.Models.Billing.Territory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("Core.Models.Billing.TransactionCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TransactionCodes");
                });

            modelBuilder.Entity("Core.Models.CRM.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("HeadDepactId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HeadDepactId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Core.Models.CRM.TicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("TicketCategories");
                });

            modelBuilder.Entity("Core.Models.UserManagement.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("Core.Models.UserManagement.InvitedUsers", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<bool>("Registered")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RoleId");

                    b.ToTable("InvitedUsers");
                });

            modelBuilder.Entity("Core.Models.UserManagement.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryOfOperation")
                        .HasColumnType("longtext");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Core.Models.UserManagement.Role", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Models.UserManagement.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("longtext");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Models.Accounting.Account", b =>
                {
                    b.HasOne("Core.Models.Accounting.SubGroupAccount", "SubGroupAccount")
                        .WithMany("Accounts")
                        .HasForeignKey("SubGroupAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubGroupAccount");
                });

            modelBuilder.Entity("Core.Models.Accounting.Bill", b =>
                {
                    b.HasOne("Core.Models.Accounting.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Core.Models.Accounting.BillTranItems", b =>
                {
                    b.HasOne("Core.Models.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Accounting.Bill", null)
                        .WithMany("BillTranItems")
                        .HasForeignKey("BillId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.Models.Accounting.SubGroupAccount", b =>
                {
                    b.HasOne("Core.Models.Accounting.GroupAccount", "GroupAccount")
                        .WithMany("SubGroupAccounts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupAccount");
                });

            modelBuilder.Entity("Core.Models.Accounting.TransactionEntry", b =>
                {
                    b.HasOne("Core.Models.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("TranAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.Models.Accounting.Vendor", b =>
                {
                    b.HasOne("Core.Models.Accounting.Account", "Account")
                        .WithMany()
                        .HasForeignKey("PaymentAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Core.Models.Billing.Address", b =>
                {
                    b.HasOne("Core.Models.Accounting.Vendor", null)
                        .WithOne("Addres")
                        .HasForeignKey("Core.Models.Billing.Address", "VendorId");
                });

            modelBuilder.Entity("Core.Models.Billing.Application", b =>
                {
                    b.HasOne("Core.Models.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("AssignedTo");

                    b.HasOne("Core.Models.Billing.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId");

                    b.HasOne("Core.Models.Billing.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.CustomerCategory", "CustomerCategory")
                        .WithMany()
                        .HasForeignKey("CustomerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.CustomerType", "CustType")
                        .WithMany()
                        .HasForeignKey("CustomerType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.CustomerTarrif", "CustomerTarrif")
                        .WithMany()
                        .HasForeignKey("CustomertarrifId");

                    b.HasOne("Core.Models.Billing.OperationArea", "OperationArea")
                        .WithMany()
                        .HasForeignKey("OperationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.SubTerritory", "SubTerritory")
                        .WithMany()
                        .HasForeignKey("SubTerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Branch");

                    b.Navigation("CustType");

                    b.Navigation("CustomerCategory");

                    b.Navigation("CustomerTarrif");

                    b.Navigation("OperationArea");

                    b.Navigation("State");

                    b.Navigation("SubTerritory");

                    b.Navigation("Territory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Billing.BillAdjustmentRequest", b =>
                {
                    b.HasOne("Core.Models.Billing.TransactionCodes", "TransactionCodes")
                        .WithMany()
                        .HasForeignKey("TransactionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionCodes");
                });

            modelBuilder.Entity("Core.Models.Billing.BillingCustomer", b =>
                {
                    b.HasOne("Core.Models.Billing.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.CustomerTarrif", "CustomerTarrif")
                        .WithMany()
                        .HasForeignKey("TarrifId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("CustomerTarrif");
                });

            modelBuilder.Entity("Core.Models.Billing.BillingRequest", b =>
                {
                    b.HasOne("Core.Models.Billing.BillingPeriod", "BillingPeriod")
                        .WithMany()
                        .HasForeignKey("BillingPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.OperationArea", "OperationArea")
                        .WithMany()
                        .HasForeignKey("OperationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingPeriod");

                    b.Navigation("Branch");

                    b.Navigation("OperationArea");
                });

            modelBuilder.Entity("Core.Models.Billing.Branch", b =>
                {
                    b.HasOne("Core.Models.Billing.OperationArea", "OperationArea")
                        .WithMany()
                        .HasForeignKey("OperationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationArea");
                });

            modelBuilder.Entity("Core.Models.Billing.BulkReading", b =>
                {
                    b.HasOne("Core.Models.Billing.BillingRequest", "BillingRequest")
                        .WithMany()
                        .HasForeignKey("BillingCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.OperationArea", "OperationArea")
                        .WithMany()
                        .HasForeignKey("OperationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingRequest");

                    b.Navigation("Branch");

                    b.Navigation("OperationArea");
                });

            modelBuilder.Entity("Core.Models.Billing.CustomerBill", b =>
                {
                    b.HasOne("Core.Models.Billing.BillingCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core.Models.Billing.DocketInitiation", b =>
                {
                    b.HasOne("Core.Models.Billing.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("InstalledBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Billing.JobCard", b =>
                {
                    b.HasOne("Core.Models.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.Application", "Application")
                        .WithMany()
                        .HasForeignKey("applicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Billing.MeterReading", b =>
                {
                    b.HasOne("Core.Models.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("ReadingBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Billing.NewConnectionInvoice", b =>
                {
                    b.HasOne("Core.Models.Billing.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Core.Models.Billing.NewConnectionInvoiceMaterials", b =>
                {
                    b.HasOne("Core.Models.Billing.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.NewConnectionInvoice", "NewConnectionInvoice")
                        .WithMany("NewConnectionInvoiceMaterials")
                        .HasForeignKey("NewConnectionInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("NewConnectionInvoice");
                });

            modelBuilder.Entity("Core.Models.Billing.NewMeterServicing", b =>
                {
                    b.HasOne("Core.Models.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("InstalledBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.MeterMake", "MeterMake")
                        .WithMany()
                        .HasForeignKey("MeterMakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Billing.MeterSize", "MeterSize")
                        .WithMany()
                        .HasForeignKey("MeterSizeId");

                    b.HasOne("Core.Models.Billing.MeterTypes", "MeterType")
                        .WithMany()
                        .HasForeignKey("MeterTypeId");

                    b.Navigation("MeterMake");

                    b.Navigation("MeterSize");

                    b.Navigation("MeterType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Billing.OperationArea", b =>
                {
                    b.HasOne("Core.Models.Billing.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Core.Models.Billing.SurveyReport", b =>
                {
                    b.HasOne("Core.Models.Billing.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserManagement.User", "Surveyor")
                        .WithMany()
                        .HasForeignKey("SurveyorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Surveyor");
                });

            modelBuilder.Entity("Core.Models.Billing.Territory", b =>
                {
                    b.HasOne("Core.Models.Billing.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Core.Models.CRM.Department", b =>
                {
                    b.HasOne("Core.Models.UserManagement.User", "User")
                        .WithMany()
                        .HasForeignKey("HeadDepactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.CRM.TicketCategory", b =>
                {
                    b.HasOne("Core.Models.CRM.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Core.Models.UserManagement.InvitedUsers", b =>
                {
                    b.HasOne("Core.Models.UserManagement.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserManagement.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Models.UserManagement.User", b =>
                {
                    b.HasOne("Core.Models.UserManagement.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("Core.Models.UserManagement.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Organisation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Models.Accounting.Bill", b =>
                {
                    b.Navigation("BillTranItems");
                });

            modelBuilder.Entity("Core.Models.Accounting.GroupAccount", b =>
                {
                    b.Navigation("SubGroupAccounts");
                });

            modelBuilder.Entity("Core.Models.Accounting.SubGroupAccount", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Core.Models.Accounting.Vendor", b =>
                {
                    b.Navigation("Addres")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Billing.NewConnectionInvoice", b =>
                {
                    b.Navigation("NewConnectionInvoiceMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
